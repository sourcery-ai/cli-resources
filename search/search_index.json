{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sourcery CLI Resources","text":"<p>Code examples &amp; design patterns for Python CLI applications.</p>"},{"location":"#libraries-used","title":"Libraries Used","text":"<ul> <li>typer</li> <li>Pydantic</li> <li>sqlite-utils</li> <li>Rich</li> </ul>"},{"location":"db-path-config/","title":"Configure the Path of a SQLite Database","text":"","tags":["configuration"]},{"location":"db-path-config/#overview","title":"Overview","text":"<p>We want to use different databases in the different environments:</p> <ul> <li>development</li> <li>tests</li> <li>production / live</li> </ul> <p>We use <code>pydantic.Settings</code> and an environment variable to make the path configurable.</p> <ul> <li>For development: set the environment variable.</li> <li>For tests: Use a pytest fixture with <code>tmpdir</code> to define a custom path.</li> </ul>","tags":["configuration"]},{"location":"db-path-config/#config","title":"Config","text":"<p>In a <code>config.py</code>:</p> <pre><code>from pathlib import Path\nfrom pydantic import BaseSettings, Field\nfrom sqlite_utils import Database\nfrom pycon_catalogue.initialize import init_db\nclass Settings(BaseSettings):\ndb_path: Path = Field(\nPath.home() / \"pycon-catalogue.db\", env=\"APP_NAME_DB_PATH\"\n)\ndef db(self) -&gt; Database:\nreturn Database(self.db_path)\nsettings: Settings = Settings()\n</code></pre>","tags":["configuration"]},{"location":"db-path-config/#setting-a-development-database","title":"Setting a Development Database","text":"<pre><code>export APP_NAME_DB_PATH=$HOME/dev-app-name.db\n</code></pre>","tags":["configuration"]},{"location":"db-path-config/#using-a-temporary-database-for-tests","title":"Using a Temporary Database for Tests","text":"<p>Use a db in <code>tmpdir</code>.</p> <pre><code>from pathlib import Path\nimport pytest\nfrom app_name import config\n@pytest.fixture(autouse=True)\ndef app_db_path(tmpdir):\nconfig.settings.db_path = Path(tmpdir / \"test-app-name.db\")\n</code></pre>","tags":["configuration"]},{"location":"raising-an-error/","title":"Raising an Error in Typer","text":"","tags":["error-handling"]},{"location":"raising-an-error/#overview","title":"Overview","text":"<p>If an error happens, ensure that:</p> <ul> <li> The command returns a non-zero exit code.</li> <li> Nothing is printed to <code>stdout</code>.</li> <li> Some error message is printed to <code>stderr</code>.</li> </ul> <p>The exit code of the last command is stored in the shell variable <code>$?</code>.</p> <p>You can check that with:</p> <pre><code>echo $?\n</code></pre>","tags":["error-handling"]},{"location":"raising-an-error/#recommended-practice-helper-function","title":"Recommended Practice: Helper Function","text":"<p>Use a helper function for raising errors.</p> <p>Benefits:</p> <ul> <li>ensuring that a non-zero exit code is returned</li> <li>ensuring that an error message is shown</li> <li>consistent error messages</li> </ul> <p>Example:</p> <pre><code>def exit_with_error(error_msg: str, code: int = 1) -&gt; typer.Exit:\nstderr_console = Console(stderr=True, style=\"bold red\")\nstderr_console.print(error_msg)\nreturn typer.Exit(code=code)\n</code></pre> <p>In the caller:</p> <pre><code>if some_error_happened:\nraise exit_with_error(str(e)) from e\n</code></pre>","tags":["error-handling"]},{"location":"raising-an-error/#pitfalls","title":"Pitfalls","text":"","tags":["error-handling"]},{"location":"raising-an-error/#raising-typerexit-without-providing-a-code","title":"Raising typer.Exit() without Providing a Code","text":"<pre><code>raise typer.Exit()\n</code></pre> <p>The command will return with exit code 0.</p>","tags":["error-handling"]},{"location":"raising-an-error/#testing","title":"Testing","text":"<p>Example test for an error case:</p> <pre><code>def test_view_not_existing_talk():\nresult = runner.invoke(app, [\"talk\", \"view\", \"42\"])\nassert result.exit_code == 1\nassert not result.stdout\nassert result.stderr == \"Talk with ID 42 not found.\\n\"\n</code></pre>","tags":["error-handling"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of tags:</p>"},{"location":"tags/#configuration","title":"configuration","text":"<ul> <li>Configure the Path of a SQLite Database</li> </ul>"},{"location":"tags/#error-handling","title":"error-handling","text":"<ul> <li>Raising an Error in Typer</li> </ul>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of tags:</p>"},{"location":"tags/#configuration","title":"configuration","text":"<ul> <li>Configure the Path of a SQLite Database</li> </ul>"},{"location":"tags/#error-handling","title":"error-handling","text":"<ul> <li>Raising an Error in Typer</li> </ul>"}]}